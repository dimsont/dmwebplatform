@page "/edit-event/{id:int}"
@using DmWebPlatform.Domain.Entities
@using System.Text.Json
@inject HttpClient HttpClient
@inject NavigationManager NavigationManager

<PageTitle>Edit Event</PageTitle>

<EditForm Model="eventModel" OnValidSubmit="HandleValidSubmit">
    <input type="hidden" value="@eventModel.Id" />

    <div class="container">
        <div class="form-group">
            <label for="name">Name</label>
            <InputText id="name" class="form-control" @bind-Value="eventModel.Name" placeholder="Enter Name" />
            <ValidationMessage For="@(() => eventModel.Name)" />
        </div>
        <div class="form-group">
            <label for="category">Category</label>
            <InputText id="category" class="form-control" @bind-Value="eventModel.Category" placeholder="Enter Category" />
            <ValidationMessage For="@(() => eventModel.Category)" />
        </div>
        <div class="form-group">
            <label for="place">Place</label>
            <InputText id="place" class="form-control" @bind-Value="eventModel.Place" placeholder="Enter Place" />
            <ValidationMessage For="@(() => eventModel.Place)" />
        </div>
        <div class="form-group">
            <label for="date">Date</label>
            <InputDate id="date" class="form-control" @bind-Value="eventModel.Date" />
            <ValidationMessage For="@(() => eventModel.Date)" />
        </div>
        <div class="form-group">
            <label for="time">Time</label>
            <InputText id="time" class="form-control" @bind-Value="timeString" placeholder="Enter Time (hh:mm)" />
            <ValidationMessage For="@(() => timeString)" />
        </div>
        <div class="form-group">
            <label for="description">Description</label>
            <InputText id="description" class="form-control" @bind-Value="eventModel.Description" placeholder="Enter Description" />
            <ValidationMessage For="@(() => eventModel.Description)" />
        </div>
        <div class="form-group">
            <label for="additionalInfo">Additional Info</label>
            <InputText id="additionalInfo" class="form-control" @bind-Value="eventModel.AdditionalInfo" placeholder="Enter Additional Info" />
            <ValidationMessage For="@(() => eventModel.AdditionalInfo)" />
        </div>
        <div class="form-group">
            <label for="images">Images</label>
            <InputText id="images" class="form-control" @bind-Value="eventModel.Images" placeholder="Enter Image Url" />
            <ValidationMessage For="@(() => eventModel.Images)" />
        </div>
        <div class="form-group">
            <ValidationSummary />
        </div>
        <div class="card-footer">
            <center>
                <button type="submit" class="btn btn-warning">Update Event</button>
                <button type="button" class="btn btn-secondary" @onclick="Cancel">Cancel</button>
            </center>
        </div>
    </div>
</EditForm>

@code {
    private Event eventModel = new Event();
    private string timeString = "";

    [Parameter]
    public int id { get; set; } // Route parameter

    protected override async Task OnInitializedAsync()
    {
        var response = await HttpClient.GetAsync($"api/events/{id}");
        if (response.IsSuccessStatusCode)
        {
            var content = await response.Content.ReadAsStringAsync();
            eventModel = JsonSerializer.Deserialize<Event>(content, new JsonSerializerOptions { PropertyNameCaseInsensitive = true });
            timeString = eventModel.Time.ToString("HH:mm"); // Set initial timeString
        }
        else
        {
            Console.Error.WriteLine($"Error fetching event: {response.StatusCode}");
        }
    }

    private async Task HandleValidSubmit()
    {
        if (TimeOnly.TryParse(timeString, out TimeOnly parsedTime))
        {
            // Set the time part of the DateTime object
            eventModel.Time = parsedTime;
            try
            {
                var response = await HttpClient.PutAsJsonAsync($"api/events/{eventModel.Id}", eventModel);
                if (response.IsSuccessStatusCode)
                {
                    NavigationManager.NavigateTo("/");
                }
                else
                {
                    Console.Error.WriteLine("Failed to update event");
                }
            }
            catch (Exception ex)
            {
                Console.Error.WriteLine($"Error updating event: {ex.Message}");
            }
        }
        else
        {
            Console.Error.WriteLine("Invalid time format");
        }
    }

    private void Cancel()
    {
        NavigationManager.NavigateTo("/");
    }
}
