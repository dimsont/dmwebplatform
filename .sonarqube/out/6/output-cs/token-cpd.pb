­+
KC:\Users\Dima\dmwebplatform_git\DmWebPlatform.Infrastructure\UnityOfWork.cs
	namespace 	
DmWebPlatform
 
. 
Infrastructure &
{		 
public

 

class

 

UnitOfWork

 
:

 
IUnitOfWork

 )
,

) *
IDisposable

+ 6
{ 
private 
bool 
	_disposed 
; 
private 
readonly 
	DbContext "

_dbContext# -
;- .
private 
readonly  
ConcurrentDictionary -
<- .
string. 4
,4 5
object6 <
>< =
_repositories> K
;K L
public 
	DbContext 
	DbContext "
=># %

_dbContext& 0
;0 1
public 

UnitOfWork 
( 
	DbFactory #
	dbFactory$ -
)- .
{ 	

_dbContext 
= 
	dbFactory "
." #
	DbContext# ,
??- /
throw0 5
new6 9!
ArgumentNullException: O
(O P
nameofP V
(V W
	dbFactoryW `
.` a
	DbContexta j
)j k
)k l
;l m
_repositories 
= 
new  
ConcurrentDictionary  4
<4 5
string5 ;
,; <
object= C
>C D
(D E
)E F
;F G
} 	
public 
async 
Task 
< 
int 
> 
SaveChangesAsync /
(/ 0
CancellationToken0 A
cancellationTokenB S
=T U
defaultV ]
)] ^
{ 	
if 
( 
	_disposed 
) 
throw 
new #
ObjectDisposedException 1
(1 2
GetType2 9
(9 :
): ;
.; <
Name< @
)@ A
;A B
return 
await 

_dbContext #
.# $
SaveChangesAsync$ 4
(4 5
cancellationToken5 F
)F G
;G H
} 	
public   
void   
Dispose   
(   
)   
{!! 	
Dispose"" 
("" 
true"" 
)"" 
;"" 
GC## 
.## 
SuppressFinalize## 
(##  
this##  $
)##$ %
;##% &
}$$ 	
	protected&& 
virtual&& 
void&& 
Dispose&& &
(&&& '
bool&&' +
	disposing&&, 5
)&&5 6
{'' 	
if(( 
((( 
!(( 
	_disposed(( 
)(( 
{)) 
if** 
(** 
	disposing** 
)** 
{++ 
try,, 
{-- 
if.. 
(.. 

_dbContext.. &
!=..' )
null..* .
)... /
{// 
if00 
(00  

_dbContext00  *
.00* +
Database00+ 3
.003 4
GetDbConnection004 C
(00C D
)00D E
.00E F
State00F K
==00L N
ConnectionState00O ^
.00^ _
Open00_ c
)00c d
{11 

_dbContext22  *
.22* +
Database22+ 3
.223 4
GetDbConnection224 C
(22C D
)22D E
.22E F
Close22F K
(22K L
)22L M
;22M N
}33 

_dbContext44 &
.44& '
Dispose44' .
(44. /
)44/ 0
;440 1
}55 
}66 
catch77 
(77 
	Exception77 $
ex77% '
)77' (
{88 
Log99 
.99 
Error99 !
(99! "
$"99" $
$str99$ A
{99A B
ex99B D
.99D E
Message99E L
}99L M
"99M N
)99N O
;99O P
}:: 
finally;; 
{<< 
	_disposed== !
===" #
true==$ (
;==( )
}>> 
}?? 
}@@ 
}AA 	
publicDD 
IRepositoryDD 
<DD 
TEntityDD "
>DD" #

RepositoryDD$ .
<DD. /
TEntityDD/ 6
>DD6 7
(DD7 8
)DD8 9
whereDD: ?
TEntityDD@ G
:DDH I
classDDJ O
{EE 	
ifFF 
(FF 
	_disposedFF 
)FF 
throwGG 
newGG #
ObjectDisposedExceptionGG 1
(GG1 2
GetTypeGG2 9
(GG9 :
)GG: ;
.GG; <
NameGG< @
)GG@ A
;GGA B
varII 
typeNameII 
=II 
typeofII !
(II! "
TEntityII" )
)II) *
.II* +
NameII+ /
;II/ 0
returnKK 
(KK 
IRepositoryKK 
<KK  
TEntityKK  '
>KK' (
)KK( )
_repositoriesKK) 6
.KK6 7
GetOrAddKK7 ?
(KK? @
typeNameKK@ H
,KKH I
_KKJ K
=>KKL N
newKKO R

RepositoryKKS ]
<KK] ^
TEntityKK^ e
>KKe f
(KKf g

_dbContextKKg q
)KKq r
)KKr s
;KKs t
}LL 	
}MM 
}NN Ñ&
JC:\Users\Dima\dmwebplatform_git\DmWebPlatform.Infrastructure\Repository.cs
	namespace 	
DmWebPlatform
 
. 
Infrastructure &
{ 
public 

class 

Repository 
< 
T 
> 
:  
IRepository! ,
<, -
T- .
>. /
where0 5
T6 7
:8 9
class: ?
{ 
public		 
DbSet		 
<		 
T		 
>		 
Entities		  
=>		! #
	DbContext		$ -
.		- .
Set		. 1
<		1 2
T		2 3
>		3 4
(		4 5
)		5 6
;		6 7
public

 
	DbContext

 
	DbContext

 "
{

# $
get

% (
;

( )
}

* +
public 

Repository 
( 
	DbContext #
	dbContext$ -
)- .
{ 	
	DbContext 
= 
	dbContext !
;! "
} 	
public 
async 
Task 
DeleteAsync %
(% &
int& )
id* ,
), -
{ 	
var 
entity 
= 
await 
Entities '
.' (
	FindAsync( 1
(1 2
id2 4
)4 5
;5 6
await 
DeleteAsync 
( 
entity $
)$ %
;% &
} 	
public 
Task 
DeleteAsync 
(  
T  !
entity" (
)( )
{ 	
Entities 
. 
Remove 
( 
entity "
)" #
;# $
return 
Task 
. 
CompletedTask %
;% &
} 	
public 
Task 
DeleteRangeAsync $
($ %
IEnumerable% 0
<0 1
T1 2
>2 3
entities4 <
)< =
{ 	
Entities 
. 
RemoveRange  
(  !
entities! )
)) *
;* +
return   
Task   
.   
CompletedTask   %
;  % &
}!! 	
public## 
async## 
Task## 
<## 
IList## 
<##  
T##  !
>##! "
>##" #
GetAllAsync##$ /
(##/ 0
)##0 1
{$$ 	
return%% 
await%% 
Entities%% !
.%%! "
ToListAsync%%" -
(%%- .
)%%. /
;%%/ 0
}&& 	
public(( 
T(( 
Find(( 
((( 
params(( 
object(( #
[((# $
](($ %
	keyValues((& /
)((/ 0
{)) 	
return** 
Entities** 
.** 
Find**  
(**  !
	keyValues**! *
)*** +
;**+ ,
}++ 	
public-- 
virtual-- 
async-- 
Task-- !
<--! "
T--" #
>--# $
	FindAsync--% .
(--. /
params--/ 5
object--6 <
[--< =
]--= >
	keyValues--? H
)--H I
{.. 	
return// 
await// 
Entities// !
.//! "
	FindAsync//" +
(//+ ,
	keyValues//, 5
)//5 6
;//6 7
}00 	
public22 
async22 
Task22 
InsertAsync22 %
(22% &
T22& '
entity22( .
)22. /
{33 	
await44 
Entities44 
.44 
AddAsync44 #
(44# $
entity44$ *
)44* +
;44+ ,
}55 	
public77 
async77 
Task77 
InsertRangeAsync77 *
(77* +
IEnumerable77+ 6
<776 7
T777 8
>778 9
entities77: B
)77B C
{88 	
await99 
Entities99 
.99 
AddRangeAsync99 (
(99( )
entities99) 1
)991 2
;992 3
}:: 	
public<< 
async<< 
Task<< 
<<< 
IList<< 
<<<  
T<<  !
><<! "
><<" #
GetAsync<<$ ,
(<<, -

Expression<<- 7
<<<7 8
Func<<8 <
<<<< =
T<<= >
,<<> ?
bool<<@ D
><<D E
><<E F
	predicate<<G P
)<<P Q
{== 	
return>> 
await>> 
Entities>> !
.>>! "
Where>>" '
(>>' (
	predicate>>( 1
)>>1 2
.>>2 3
ToListAsync>>3 >
(>>> ?
)>>? @
;>>@ A
}?? 	
}@@ 
}AA 
dC:\Users\Dima\dmwebplatform_git\DmWebPlatform.Infrastructure\Interfaces\Services\IAuditLogService.cs
	namespace 	
DmWebPlatform
 
. 
Infrastructure &
.& '

Interfaces' 1
.1 2
Services2 :
{ 
public 

	interface 
IAuditLogService %
{ 
Task 
< 
List 
< 
AuditLogEntry 
>  
>  !
GetAuditLogsAsync" 3
(3 4
)4 5
;5 6
Task		 
LogActionAsync		 
(		 
AuditActionType		 +

actionType		, 6
,		6 7
string		8 >
payload		? F
)		F G
;		G H
}

 
} Ã
aC:\Users\Dima\dmwebplatform_git\DmWebPlatform.Infrastructure\Interfaces\Services\ITokenService.cs
	namespace 	
DmWebPlatform
 
. 
Infrastructure &
.& '

Interfaces' 1
.1 2
Services2 :
{ 
public 

	interface 
ITokenService "
{ 
Task 
< 
string 
> 
GenerateToken "
(" #
ApplicationUser# 2
user3 7
)7 8
;8 9
} 
}		 Ô

aC:\Users\Dima\dmwebplatform_git\DmWebPlatform.Infrastructure\Interfaces\Services\IEventService.cs
	namespace 	
DmWebPlatform
 
. 
Infrastructure &
.& '

Interfaces' 1
.1 2
Services2 :
{ 
public 

	interface 
IEventService "
{ 
Task 
< 
IList 
< 
EventDto 
> 
> 
GetAll $
($ %
)% &
;& '
Task 
< 
EventDto 
> 
GetOne 
( 
int !
eventId" )
)) *
;* +
Task 
Update 
( 
EventDto 

eventInput '
)' (
;( )
Task 
Add 
( 
EventDto 

eventInput $
)$ %
;% &
Task 
Delete 
( 
int 
eventId 
)  
;  !
Task 
< 
IList 
< 
EventDto 
> 
> 
SearchEventsAsync /
(/ 0
string0 6

searchTerm7 A
)A B
;B C
} 
} Õ
WC:\Users\Dima\dmwebplatform_git\DmWebPlatform.Infrastructure\Interfaces\IUnityOfWork.cs
	namespace 	
DmWebPlatform
 
. 
Infrastructure &
.& '

Interfaces' 1
{ 
public 

	interface 
IUnitOfWork  
:! "
IDisposable# .
{ 
	DbContext 
	DbContext 
{ 
get !
;! "
}# $
IRepository 
< 
T 
> 

Repository !
<! "
T" #
># $
($ %
)% &
where' ,
T- .
:/ 0
class1 6
;6 7
Task 
< 
int 
> 
SaveChangesAsync "
(" #
CancellationToken# 4
cancellationToken5 F
=G H
defaultI P
)P Q
;Q R
} 
} É
VC:\Users\Dima\dmwebplatform_git\DmWebPlatform.Infrastructure\Interfaces\IRepository.cs
	namespace 	
DmWebPlatform
 
. 
Infrastructure &
.& '

Interfaces' 1
{ 
public 

	interface 
IRepository  
<  !
T! "
>" #
where$ )
T* +
:, -
class. 3
{ 
DbSet 
< 
T 
> 
Entities 
{ 
get 
;  
}! "
	DbContext		 
	DbContext		 
{		 
get		 !
;		! "
}		# $
Task 
< 
IList 
< 
T 
> 
> 
GetAllAsync "
(" #
)# $
;$ %
Task 
< 
IList 
< 
T 
> 
> 
GetAsync 
(  

Expression  *
<* +
Func+ /
</ 0
T0 1
,1 2
bool3 7
>7 8
>8 9
	predicate: C
)C D
;D E
T 	
Find
 
( 
params 
object 
[ 
] 
	keyValues (
)( )
;) *
Task   
<   
T   
>   
	FindAsync   
(   
params    
object  ! '
[  ' (
]  ( )
	keyValues  * 3
)  3 4
;  4 5
Task&& 
InsertAsync&& 
(&& 
T&& 
entity&& !
)&&! "
;&&" #
Task,, 
InsertRangeAsync,, 
(,, 
IEnumerable,, )
<,,) *
T,,* +
>,,+ ,
entities,,- 5
),,5 6
;,,6 7
Task22 
DeleteAsync22 
(22 
int22 
id22 
)22  
;22  !
Task99 
DeleteAsync99 
(99 
T99 
entity99 !
)99! "
;99" #
Task?? 
DeleteRangeAsync?? 
(?? 
IEnumerable?? )
<??) *
T??* +
>??+ ,
entities??- 5
)??5 6
;??6 7
}@@ 
}AA à
UC:\Users\Dima\dmwebplatform_git\DmWebPlatform.Infrastructure\Enums\AuditActionType.cs
	namespace 	
DmWebPlatform
 
. 
Infrastructure &
.& '
Enums' ,
{ 
public 

enum 
AuditActionType 
{ 
CreateEvent 
, 
UpdateEvent 
, 
DeleteEvent 
, 
SearchEvent 
}		 
} 